---
import { generateSchemas } from "../lib/generateSchemas";
import { siteConfig } from "../config/kumarpuan_siteConfig";
import "../styles/global.css";
const { siteMeta } = siteConfig;
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

// image prop'u string veya { src, width?, height? } olabilir
type ImgLike = string | { src: string; width?: number; height?: number } | undefined;

const { title, description, canonical, schemaType, extra, keywords, image } = Astro.props as {
  title: string; description: string; canonical: string; schemaType?: string;
  extra?: any; keywords?: string; image?: ImgLike;
};

const { pageKey } = Astro.props;
const pageData = siteConfig.pages[pageKey] || siteConfig.pages.home;

function toAbs(urlLike?: string) {
  if (!urlLike) return undefined;
  return urlLike.startsWith("http") ? urlLike : new URL(urlLike, Astro.site).href;
}

// sayfa görseli önceliği: prop -> pageData.image -> site genel og.image
const imgCandidate: ImgLike = image ?? (pageData.image as ImgLike) ?? (siteMeta.og?.image as ImgLike);

// normalize et (string veya obje)
const imgSrcRel = typeof imgCandidate === "string" ? imgCandidate : imgCandidate?.src;
const imgW = typeof imgCandidate === "object" ? imgCandidate?.width : undefined;
const imgH = typeof imgCandidate === "object" ? imgCandidate?.height : undefined;

const pageImageAbs = toAbs(imgSrcRel);

// tarihler
const datePublished = pageData.datePublished;
const dateModified  = pageData.dateModified ?? pageData.datePublished;

// şemalar
const schemas = generateSchemas({
  schemaType: (pageData.schemaType || "Article") as "Article" | "FAQPage",
  title: pageData.title,
  description: pageData.description,
  url: pageData.canonical,
  logoUrl: pageData.logo || siteMeta.og?.image,
  organizationName: siteConfig.siteMeta.name,
  organizationUrl: siteConfig.siteMeta.url,
  sameAs: siteMeta.sameAs || [],
  faq: pageData.extra?.faq || [],
  breadcrumbs: [
    { name: "Anasayfa", item: siteConfig.siteMeta.url },
    ...(pageKey !== "home" && pageData?.heading ? [{ name: pageData.heading, item: pageData.canonical }] : [])
  ],
  // liste / review kısımların varsa aynen ekle
  itemList: siteConfig.siteMeta.recommendedSites?.map((s, i) => ({
    position: s.position ?? i + 1, url: s.url, name: s.name, image: s.image
  })) || [],
  reviews: siteConfig.siteMeta.recommendedSites?.map(s => ({
    name: s.name, ratingValue: s.ratingValue, bestRating: s.bestRating
  })) || [],
  datePublished,
  dateModified,
  imageUrl: pageImageAbs,        // ✅ önemli
  imageWidth: imgW,
  imageHeight: imgH
});

const isHome = pageKey === "home";
const ogType = isHome ? "website" : "article";
---
<!DOCTYPE html>
<html lang="tr" class="scroll-smooth">
  <head>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GRBDQQGDWY"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-GRBDQQGDWY');
    </script>

    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/favicon.png">
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <link rel="canonical" href={canonical} />
    <meta name="robots" content="index, follow" />
    <meta name="author" content={siteMeta.author} />
    <meta name="publisher" content={siteMeta.publisher} />

    <!-- OpenGraph -->
    <meta property="og:type" content={ogType} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonical} />
    {pageImageAbs && <meta property="og:image" content={pageImageAbs} />}
    {imgW && <meta property="og:image:width" content={String(imgW)} />}
    {imgH && <meta property="og:image:height" content={String(imgH)} />}

    {datePublished && <meta property="article:published_time" content={datePublished} />}
    {dateModified && <meta property="article:modified_time"  content={dateModified} />}
    {dateModified && <meta property="og:updated_time" content={dateModified} />}

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    {pageImageAbs && <meta name="twitter:image" content={pageImageAbs} />}   

    {schemas.map(schema => (
      <script type="application/ld+json" set:html={JSON.stringify(schema)}></script>
    ))}
  </head>
  <body class={siteConfig.theme.bodyClass}>
    <Header />
    <main class="max-w-3xl mx-auto px-6 py-10 flex-grow">
      {pageKey !== "home" && datePublished && (
        <p class="text-sm text-gray-400 mb-4">
          <time datetime={datePublished}>Yayın: {new Date(datePublished).toLocaleDateString('tr-TR')}</time>
          {dateModified && (
            <> · <time datetime={dateModified}>Güncelleme: {new Date(dateModified).toLocaleDateString('tr-TR')}</time></>
          )}
        </p>
      )}
      <slot />
    </main>
    <Footer />
    <script src="/scroll-animate.js" defer></script>
  </body>
</html>