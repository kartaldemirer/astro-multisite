---
import { generateSchemas } from "../lib/generateSchemas";
import { toIsoUtcOrNull, freezePublished } from "../lib/dateUtils";
import { siteConfig } from "../config/kumarpuan_siteConfig";
import "../styles/global.css";
const { siteMeta } = siteConfig;
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

const { title, description, canonical, schemaType, extra, keywords } = Astro.props;
const { pageKey } = Astro.props;
const pageData = siteConfig.pages[pageKey] || siteConfig.pages.home;

// FAQ
const faq = pageData.extra?.faq || [];

// Breadcrumbs
const breadcrumbs = [{ name: "Anasayfa", item: siteConfig.siteMeta.url }];
if (pageData?.category) {
  breadcrumbs.push({ name: pageData.category.name, item: pageData.category.url });
}
if (pageKey !== "home" && pageData?.heading) {
  breadcrumbs.push({ name: pageData.heading, item: pageData.canonical });
}

// ItemList & Reviews
const itemList = siteConfig.siteMeta.recommendedSites.map(site => ({
  position: site.position, url: site.url, name: site.name, image: site.image
}));
const reviews = siteConfig.siteMeta.recommendedSites.map(site => ({
  name: site.name, ratingValue: site.ratingValue, bestRating: site.bestRating
}));

// === Tarihler: published sabit, modified gerçek olduğunda set ===
const datePublished = freezePublished(pageData.datePublished);    // sadece geçerliyse
const dateModifiedRaw = pageData.dateModified && pageData.dateModified !== pageData.datePublished
  ? pageData.dateModified
  : undefined;
const dateModified = toIsoUtcOrNull(dateModifiedRaw);

// Şemalar
const schemas = generateSchemas({
  schemaType: pageData.schemaType || "Article",
  title: pageData.title,
  description: pageData.description,
  url: pageData.canonical,
  logoUrl: pageData.logo || siteMeta.og?.image,
  organizationName: siteConfig.siteMeta.name,
  organizationUrl: siteConfig.siteMeta.url,
  sameAs: siteMeta.sameAs || [],
  faq,
  breadcrumbs,
  itemList,
  reviews,
  datePublished,
  dateModified
});

// OG type koşullu
const isHome = pageKey === "home";
const ogType = isHome ? "website" : "article";
---
<!DOCTYPE html>
<html lang="tr" class="scroll-smooth">
  <head>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GRBDQQGDWY"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-GRBDQQGDWY');
    </script>

    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/favicon.png">
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <link rel="canonical" href={canonical} />
    <meta name="robots" content="index, follow" />
    <meta name="author" content={siteMeta.author} />
    <meta name="publisher" content={siteMeta.publisher} />

    <!-- OpenGraph -->
    <meta property="og:type" content={ogType} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonical} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image" content={siteMeta.og.image} />
    {datePublished && <meta property="article:published_time" content={datePublished} />}
    {dateModified && <meta property="article:modified_time"  content={dateModified} />}
    {dateModified && <meta property="og:updated_time" content={dateModified} />}

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={siteMeta.twitter.image} />

    {schemas.map(schema => (
      <script type="application/ld+json" set:html={JSON.stringify(schema)}></script>
    ))}
  </head>
  <body class={siteConfig.theme.bodyClass}>
    <Header />
    <main class="max-w-3xl mx-auto px-6 py-10 flex-grow">
      {pageKey !== "home" && datePublished && (
        <p class="text-sm text-gray-400 mb-4">
          <time datetime={datePublished}>Yayın: {new Date(datePublished).toLocaleDateString('tr-TR')}</time>
          {dateModified && (
            <> · <time datetime={dateModified}>Güncelleme: {new Date(dateModified).toLocaleDateString('tr-TR')}</time></>
          )}
        </p>
      )}
      <slot />
    </main>
    <Footer />
    <script src="/scroll-animate.js" defer></script>
  </body>
</html>